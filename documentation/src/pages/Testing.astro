---
/**
 * Simple, static page that renders your Detailed Testing Documentation.
 * Drop this into: documentation/src/pages/testing-documentation.astro
 *
 * Styling is utility-first (Tailwind-like classes). If you don’t use Tailwind,
 * replace the classes with your CSS, or remove them.
 */

type Section = { id: string; title: string; body: string };

const sections: Section[] = [
  {
    id: "app-js",
    title: "App.js",
    body:
      "Validated root app render, routing, and provider integration. Ensured initial DOM structure and navigation mounted correctly so the app boots reliably in all environments.",
  },
  {
    id: "header",
    title: "Header.jsx",
    body:
      "Verified navigation and auth controls (e.g., logout flow) work as intended. Mocked navigation to confirm route calls and top-level UX reliability.",
  },
  {
    id: "balance-card",
    title: "BalanceCard.jsx",
    body:
      "Ensured account balances render correctly with valid props and fail safely with missing/invalid data. Covered simple but critical financial display edge cases.",
  },
  {
    id: "bet-history-card",
    title: "BetHistoryCard.jsx",
    body:
      "Checked accurate rendering of historical bets (teams, scores, outcomes) and graceful handling of missing or incomplete data for trustworthy history review.",
  },
  {
    id: "leaderboard-card",
    title: "LeaderboardCard.jsx",
    body:
      "Verified player names, rankings, scores, and conditional styling for top positions to keep the high-visibility leaderboard consistently accurate.",
  },
  {
    id: "profile-page",
    title: "ProfilePage.jsx",
    body:
      "Confirmed profile dashboard integrates subcomponents (details, stats, settings) and updates render as state changes, ensuring a reliable container page.",
  },
  {
    id: "quick-actions",
    title: "QuickActions.jsx",
    body:
      "Tested shortcut buttons trigger correct callbacks/routes (betting, stats, details) and handle edge cases or disabled states for smooth, efficient navigation.",
  },
  {
    id: "welcome-banner",
    title: "WelcomeBanner.jsx",
    body:
      "Verified personalized welcome text renders correctly with user data and remains stable under different prop values.",
  },
  {
    id: "user-details-card",
    title: "UserDetailsCard.jsx",
    body:
      "Covered form inputs, state updates, localStorage persistence, and error handling for robust user detail editing (e.g., username and avatar interactions).",
  },
  {
    id: "recent-matches",
    title: "RecentMatches.jsx",
    body:
      "Validated fetching and rendering of recent fixtures with loading/error states and multiple entries; ensured reliable data flow and pagination behavior.",
  },
  {
    id: "upcoming-matches",
    title: "UpcomingMatches.jsx",
    body:
      "Ensured upcoming fixtures display with correct team info/logos/dates and that empty/error states and navigation (e.g., View All) are handled cleanly.",
  },
  {
    id: "fixture-info",
    title: "FixtureInfo.jsx",
    body:
      "Confirmed fixture metadata (venue, competition, kickoff) renders when provided and fails gracefully when missing.",
  },
  {
    id: "head-to-head",
    title: "HeadToHead.jsx",
    body:
      "Checked historical matchups render accurately (teams/logos/results) and that loading/empty/error cases remain clear for analytical comparisons.",
  },
  {
    id: "match-prediction",
    title: "MatchPrediction.jsx",
    body:
      "Validated prediction output from API (scores/probabilities/recommendations) across success, loading, empty, and error states for user trust.",
  },
  {
    id: "recent-form",
    title: "RecentForm.jsx",
    body:
      "Ensured recent performance sequences (W/D/L) render correctly and handle shorter sequences, with robust loading/error handling.",
  },
  {
    id: "team-statistics",
    title: "TeamStatistics.jsx",
    body:
      "Verified stats (possession, shots, goals, derived metrics) render with correct values and formatting; missing stats don’t break UI.",
  },
  {
    id: "upcoming-match-details",
    title: "UpcomingMatchDetails.jsx",
    body:
      "Checked team names, kickoff, and location render correctly and navigations into detail views integrate cleanly.",
  },
  {
    id: "login",
    title: "Login.jsx",
    body:
      "Tested inputs, validation errors, post-login navigation, and error feedback on invalid credentials for a robust, user-friendly login flow.",
  },
  {
    id: "signup",
    title: "SignUp.jsx",
    body:
      "Verified account creation flow (capture, validate, send), success navigation, error display, and edge cases like mismatched passwords.",
  },
  {
    id: "home",
    title: "Home.jsx",
    body:
      "Validated dashboard composition (QuickActions, BalanceCard, WelcomeBanner) and internal links; ensures reliable first-impression experience.",
  },
  {
    id: "profile",
    title: "Profile.jsx",
    body:
      "Ensured user info renders consistently and integrates subcomponents (UserDetailsCard, BetHistoryCard) with correct state updates.",
  },
  {
    id: "landing-page",
    title: "LandingPage.jsx",
    body:
      "Checked unauthenticated entry point: marketing text, login/signup CTAs, links, and interactions navigate correctly for smooth onboarding.",
  },
];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Detailed Testing Documentation</title>
    <meta name="description" content="Component-by-component testing overview." />
  </head>
  <body class="bg-white text-slate-800 dark:bg-slate-950 dark:text-slate-100">
    <main class="mx-auto max-w-5xl px-5 py-10">
      <header class="mb-10">
        <h1 class="text-3xl font-bold tracking-tight">Detailed Testing Documentation</h1>
        <p class="mt-2 text-slate-600 dark:text-slate-300">
          A concise, component-by-component summary of what we validated in tests and why it matters.
        </p>


        <h1 class="text-3xl font-bold tracking-tight">How to run test cases locally</h1>
        <p class="mt-2 text-slate-600 dark:text-slate-300">
          After coning the repostiory, on can change directory to the frontend directory and run mpm install then follwed by npm test to see the result of all the test case.
          Additionally if theey code coverage want to be seen the code npm run test: coverage can be run, still in the frontedn directory
        </p>

        <!-- Compact TOC -->
        <nav class="mt-6 rounded-xl border border-slate-200/70 p-4 dark:border-slate-800">
          <h2 class="mb-3 text-sm font-semibold uppercase tracking-wider text-slate-500">
            On this page
          </h2>
          <ul class="grid gap-2 sm:grid-cols-2 md:grid-cols-3">
            {sections.map((s) => (
              <li><a href={`#${s.id}`} class="text-sky-600 hover:underline dark:text-sky-400">{s.title}</a></li>
            ))}
          </ul>
        </nav>
      </header>

      <article class="prose prose-slate max-w-none dark:prose-invert">
        {sections.map((s) => (
          <section id={s.id} class="scroll-mt-24">
            <h2 class="mt-10">{s.title}</h2>
            <p>{s.body}</p>
          </section>
        ))}
      </article>

      <footer class="mt-12 border-t border-slate-200/70 pt-6 text-sm text-slate-500 dark:border-slate-800">
        Source: internal “Detailed Testing Documentation” summary. 
      </footer>
    </main>

    <img
      src="code_coverage.jpeg"
      alt="Jira workflow diagram showing issue states, review loops, and hotfix lane"
      class="mx-auto block max-w-full h-auto"
    />
  </body>
</html>
